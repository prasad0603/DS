/////////////////////////////////////////////////////////////EXPERIMENT1/////////////////////////////////////////////////////////////////////////////////////////////////////
npx create-react-app registrationform  
cd registrationform
npm start
//code
// Add basic validation
function App() {
  const handleSubmit = (e) => {
    e.preventDefault();
    alert('Form submitted!');
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" placeholder="Your Name" required />
      <input type="email" placeholder="Your Email" required />
      <button type="submit">Submit</button>
    </form>
  );
}

export default App;  
//Modify app.js with this content
/////////////////////////////////////////////////////////////////////////////////EXPERIMENT2/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////EXPERIMENT3///////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////EXPERIMENT4(PUT INTO GITHUB PAGES AFTHER THE CODE IS ALREADY PUSH INTO YOUR REPO)////////////////////////////////
git init
git add .
git commit -am "commit"
git remote add origin https://github.com/prasad0603/reg.git
git branch -M main
git push -u origin main
git pull origin main --rebase//if the code is not push in main branch then do it command
git push -u origin main
git checkout -b feature-branch-name
git add .
git commit -m "Add login page UI"
git push -u origin feature-branch-name
///////////////////////////////////////////////////////////////////////////EXPERIMENT5///////////////////////////////////////////////////////////////////////////////////////
create a folder in react app and push into github after these steps
.github
workflows
//inside these two folder create a file 
//main.yml(for react code)
name: React CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build the app
        run: npm run build

      - name: Run tests
        run: npm test -- --watchAll=false


//main.yml(helloworld in python)
name: Hello Python

on:
  push:
    branches:
      - main

jobs:
  hello-world:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Run Hello World
        run: |
          python -c "print('Hello, World')"
///////////////////////////////////////////////////////////////EXPERIMENT6(CONTINOUS DEPLOYEMENT)////////////////////////////////////////////////////////////////////////////
git init
npm install gh pages
git add .
FIEST ADD THIS ONE LINE IN PACKAGE.JSON
"homepage": "https://prasad0603.github.io/Devops1.git"
"predeploy": "npm run build"
"deploy": "gh-pages -d build"
npm run deploy
npm install gh pages
npx gh-pages -d build
////////////////////////////////////////////////////////////////////////EXPERIMENT7//////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////EXPERIMENT8//////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////EXPERIMENT9///////////////////////////////////////////////////////////////////////////////////////
step1:created the react application first for reg form
step2:created a dockerfile and .dockerignore in the regform
step3:commands
docker build -t <user folder name> .
docker run -d -p 8080:80 <user folder name>
docker tag <user folder name created> <your-dockerhub-username>/<user folder name created>
docker push <your-dockerhub-username>/<user folder name created>
//Dockerfile
# Step 1: Build the React app
FROM node:18-alpine AS builder

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .
RUN npm run build

# Step 2: Serve with Nginx
FROM nginx:alpine

# Remove default nginx website
RUN rm -rf /usr/share/nginx/html/*

# Copy build files from React to Nginx folder
COPY --from=builder /app/build /usr/share/nginx/html

# Expose port 80 for web access
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

//.dockerignore file create
node_modules
build
.dockerignore
Dockerfile
.git
.gitignore
 COMMAND PROMPT









