/////////////////////////////////////////////////////////////EXPERIMENT1/////////////////////////////////////////////////////////////////////////////////////////////////////
npx create-react-app registrationform  
cd registrationform
npm start
//code
// Add basic validation
function App() {
  const handleSubmit = (e) => {
    e.preventDefault();
    alert('Form submitted!');
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" placeholder="Your Name" required />
      <input type="email" placeholder="Your Email" required />
      <button type="submit">Submit</button>
    </form>
  );
}

export default App;  
//Modify app.js with this content
/////////////////////////////////////////////////////////////////////////////////EXPERIMENT2/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////EXPERIMENT3/////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////EXPERIMENT4(PUT INTO GITHUB PAGES AFTHER THE CODE IS ALREADY PUSH INTO YOUR REPO)////////////////////////////////
git init
git add .
git commit -am "commit"
git remote add origin https://github.com/prasad0603/reg.git
git branch -M main
git push -u origin main
git pull origin main --rebase//if the code is not push in main branch then do it command
git push -u origin main
git checkout -b feature-branch-name
git add .
git commit -m "Add login page UI"
git push -u origin feature-branch-name
///////////////////////////////////////////////////////////////////////////EXPERIMENT5///////////////////////////////////////////////////////////////////////////////////////
create a folder in react app and push into github after these steps
.github
workflows
//inside these two folder create a file 
//main.yml(for react code)
name: React CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build the app
        run: npm run build

      - name: Run tests
        run: npm test -- --watchAll=false


//main.yml(helloworld in python)
name: Hello Python

on:
  push:
    branches:
      - main

jobs:
  hello-world:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Run Hello World
        run: |
          python -c "print('Hello, World')"
///////////////////////////////////////////////////////////////EXPERIMENT6(CONTINOUS DEPLOYEMENT)////////////////////////////////////////////////////////////////////////////
git init
npm install gh pages
git add .
FIEST ADD THIS ONE LINE IN PACKAGE.JSON
"homepage": "https://prasad0603.github.io/Devops1.git"
"predeploy": "npm run build"
"deploy": "gh-pages -d build"
npm run deploy
npm install gh pages
npx gh-pages -d build
////////////////////////////////////////////////////////////////////////EXPERIMENT7//////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////EXPERIMENT8//////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////EXPERIMENT9///////////////////////////////////////////////////////////////////////////////////////
step1:created the react application first for reg form
step2:created a dockerfile and .dockerignore in the regform
step3:commands
docker build -t <user folder name> .
docker run -d -p 8080:80 <user folder name>
docker tag <user folder name created> <your-dockerhub-username>/<user folder name created>
docker push <your-dockerhub-username>/<user folder name created>
//Dockerfile
# Step 1: Build the React app
FROM node:18-alpine AS builder

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .
RUN npm run build

# Step 2: Serve with Nginx
FROM nginx:alpine

# Remove default nginx website
RUN rm -rf /usr/share/nginx/html/*

# Copy build files from React to Nginx folder
COPY --from=builder /app/build /usr/share/nginx/html

# Expose port 80 for web access
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

//.dockerignore file create
node_modules
build
.dockerignore
Dockerfile
.git
.gitignore
 COMMAND PROMPT
//////////////////////////////////////////////////////////////////////////EXPERIMENT10&11////////////////////////////////////////////////////////////////////////////////////
docker -v
minikube status
kubectl version
step1:after creating the docker container and push it into the dockerhub
step2:add the deployement.yml file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: containermain-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: containermain
  template:
    metadata:
      labels:
        app: containermain
    spec:
      containers:
      - name: containermain
        image: prasadsadanala/containermain
        ports:
        - containerPort: 80
services.yml
apiVersion: v1
kind: Service
metadata:
  name: containeroriginal-service
spec:
  selector:
    app: containeroriginal
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: NodePort

step3:commands
minikube start
minikube delete//is error in minikube start and repeat the process again same from the minikube start
kubectl get nodes
kubectl apply -f deployment.yml --validate=false
minikube dashboard
///////////////////////////////////////////////////////////////////////////////EXPERIMENT12//////////////////////////////////////////////////////////////////////////////////
step:create a folder demo
step:create a folder mkdir selenium through vscode
step:cd selenium
step:npm init -y
step:npm install selenium-webdriver
step:npm install chromedriver
step:create 2 files index.html and test.js
index.html
<!DOCTYPE html>
<html>
<head>
  <title>My Registration Form</title>
  <style>
    body, html {
      height: 100%;
      margin: 0;
      font-family: Arial, sans-serif;
    }

    .container {
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }


    label {
      font-weight: bold;
    }

    input {
      width: 100%;
      padding: 8px;
      margin-top: 5px;
      margin-bottom: 15px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    button {
      width: 100%;
      padding: 10px;
      color:black;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    h2 {
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>Registration Form</h2>

    <form id="regForm" action="#" method="post">
      <label for="username">Username</label><br />
      <input type="text" id="username" name="username" required /><br />

      <label for="email">Email</label><br />
      <input type="email" id="email" name="email" required /><br />

      <label for="password">Password</label><br />
      <input type="password" id="password" name="password" required /><br />

      <button type="submit" id="submitBtn">Register</button>
    </form>
  </div>
</body>
</html>
//test.js
const { Builder, By } = require('selenium-webdriver');
const path = require('path');

async function runTest() {
  const driver = await new Builder().forBrowser('chrome').build();

  try {
    // Get the local file path
    const filePath = 'file://' + path.resolve(__dirname, 'index.html');

    // Open the form
    await driver.get(filePath);
    await driver.sleep(2000); // Wait 2 seconds

    // Fill in username
    await driver.findElement(By.id('username')).sendKeys('TestUser123');
    await driver.sleep(2000); // Wait 2 seconds

    // Fill in email
    await driver.findElement(By.id('email')).sendKeys('test@example.com');
    await driver.sleep(2000); // Wait 2 seconds

    // Fill in password
    await driver.findElement(By.id('password')).sendKeys('SecurePass456');
    await driver.sleep(2000); // Wait 2 seconds

    // Click the Register button
    await driver.findElement(By.id('submitBtn')).click();
    await driver.sleep(500); // Wait 3 seconds to see the result

    console.log("Form filled and submitted slowly!");

  } catch (error) {
    console.error("Test failed:", error);
  } finally {
    await driver.quit();
  }
}

runTest();
step:node test.js    
///////////////////////////////////////////////////////////////////////////////EXPERIMENT13//////////////////////////////////////////////////////////////////////////////////







